# Generated from YAPL.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,58,435,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,128,8,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,3,1,138,8,1,1,2,1,2,1,2,1,2,3,2,144,8,2,1,3,1,3,1,
        3,1,3,3,3,150,8,3,1,4,1,4,1,4,1,4,3,4,156,8,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,174,8,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,188,8,6,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,198,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,3,8,208,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,218,8,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,230,8,10,1,11,1,
        11,1,11,1,11,1,11,1,11,3,11,238,8,11,1,12,1,12,1,12,1,12,1,12,1,
        12,3,12,246,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,254,8,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,43,1,44,1,44,1,44,1,45,1,45,5,45,354,8,45,10,45,12,45,357,9,45,
        1,46,1,46,1,47,4,47,362,8,47,11,47,12,47,363,1,48,1,48,1,49,1,49,
        1,50,1,50,3,50,372,8,50,1,51,1,51,1,51,1,51,5,51,378,8,51,10,51,
        12,51,381,9,51,1,51,1,51,1,52,1,52,3,52,387,8,52,1,53,1,53,1,53,
        1,53,5,53,393,8,53,10,53,12,53,396,9,53,1,53,1,53,1,53,1,53,1,54,
        1,54,1,54,1,54,5,54,406,8,54,10,54,12,54,409,9,54,1,54,1,54,1,54,
        1,54,1,54,1,55,3,55,417,8,55,1,55,1,55,4,55,421,8,55,11,55,12,55,
        422,1,55,1,55,1,56,4,56,428,8,56,11,56,12,56,429,1,56,1,56,1,57,
        1,57,2,394,407,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,1,0,6,3,0,65,90,95,95,97,122,1,0,
        48,57,2,0,65,90,95,95,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
        114,114,116,116,4,0,10,10,13,13,34,34,92,92,3,0,8,10,12,13,32,32,
        460,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,
        0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,127,1,0,0,0,3,
        137,1,0,0,0,5,143,1,0,0,0,7,149,1,0,0,0,9,155,1,0,0,0,11,173,1,0,
        0,0,13,187,1,0,0,0,15,197,1,0,0,0,17,207,1,0,0,0,19,217,1,0,0,0,
        21,229,1,0,0,0,23,237,1,0,0,0,25,245,1,0,0,0,27,253,1,0,0,0,29,255,
        1,0,0,0,31,261,1,0,0,0,33,266,1,0,0,0,35,271,1,0,0,0,37,281,1,0,
        0,0,39,286,1,0,0,0,41,290,1,0,0,0,43,297,1,0,0,0,45,302,1,0,0,0,
        47,304,1,0,0,0,49,306,1,0,0,0,51,308,1,0,0,0,53,310,1,0,0,0,55,312,
        1,0,0,0,57,314,1,0,0,0,59,316,1,0,0,0,61,318,1,0,0,0,63,320,1,0,
        0,0,65,322,1,0,0,0,67,324,1,0,0,0,69,326,1,0,0,0,71,328,1,0,0,0,
        73,330,1,0,0,0,75,332,1,0,0,0,77,334,1,0,0,0,79,336,1,0,0,0,81,339,
        1,0,0,0,83,341,1,0,0,0,85,343,1,0,0,0,87,345,1,0,0,0,89,348,1,0,
        0,0,91,351,1,0,0,0,93,358,1,0,0,0,95,361,1,0,0,0,97,365,1,0,0,0,
        99,367,1,0,0,0,101,371,1,0,0,0,103,373,1,0,0,0,105,386,1,0,0,0,107,
        388,1,0,0,0,109,401,1,0,0,0,111,420,1,0,0,0,113,427,1,0,0,0,115,
        433,1,0,0,0,117,118,5,67,0,0,118,119,5,76,0,0,119,120,5,65,0,0,120,
        121,5,83,0,0,121,128,5,83,0,0,122,123,5,99,0,0,123,124,5,108,0,0,
        124,125,5,97,0,0,125,126,5,115,0,0,126,128,5,115,0,0,127,117,1,0,
        0,0,127,122,1,0,0,0,128,2,1,0,0,0,129,130,5,69,0,0,130,131,5,76,
        0,0,131,132,5,83,0,0,132,138,5,69,0,0,133,134,5,101,0,0,134,135,
        5,108,0,0,135,136,5,115,0,0,136,138,5,101,0,0,137,129,1,0,0,0,137,
        133,1,0,0,0,138,4,1,0,0,0,139,140,5,70,0,0,140,144,5,73,0,0,141,
        142,5,102,0,0,142,144,5,105,0,0,143,139,1,0,0,0,143,141,1,0,0,0,
        144,6,1,0,0,0,145,146,5,73,0,0,146,150,5,70,0,0,147,148,5,105,0,
        0,148,150,5,102,0,0,149,145,1,0,0,0,149,147,1,0,0,0,150,8,1,0,0,
        0,151,152,5,73,0,0,152,156,5,78,0,0,153,154,5,105,0,0,154,156,5,
        110,0,0,155,151,1,0,0,0,155,153,1,0,0,0,156,10,1,0,0,0,157,158,5,
        73,0,0,158,159,5,78,0,0,159,160,5,72,0,0,160,161,5,69,0,0,161,162,
        5,82,0,0,162,163,5,73,0,0,163,164,5,84,0,0,164,174,5,83,0,0,165,
        166,5,105,0,0,166,167,5,110,0,0,167,168,5,104,0,0,168,169,5,101,
        0,0,169,170,5,114,0,0,170,171,5,105,0,0,171,172,5,116,0,0,172,174,
        5,115,0,0,173,157,1,0,0,0,173,165,1,0,0,0,174,12,1,0,0,0,175,176,
        5,73,0,0,176,177,5,83,0,0,177,178,5,86,0,0,178,179,5,79,0,0,179,
        180,5,73,0,0,180,188,5,68,0,0,181,182,5,105,0,0,182,183,5,115,0,
        0,183,184,5,118,0,0,184,185,5,111,0,0,185,186,5,105,0,0,186,188,
        5,100,0,0,187,175,1,0,0,0,187,181,1,0,0,0,188,14,1,0,0,0,189,190,
        5,76,0,0,190,191,5,79,0,0,191,192,5,79,0,0,192,198,5,80,0,0,193,
        194,5,108,0,0,194,195,5,111,0,0,195,196,5,111,0,0,196,198,5,112,
        0,0,197,189,1,0,0,0,197,193,1,0,0,0,198,16,1,0,0,0,199,200,5,80,
        0,0,200,201,5,79,0,0,201,202,5,79,0,0,202,208,5,76,0,0,203,204,5,
        112,0,0,204,205,5,111,0,0,205,206,5,111,0,0,206,208,5,108,0,0,207,
        199,1,0,0,0,207,203,1,0,0,0,208,18,1,0,0,0,209,210,5,84,0,0,210,
        211,5,72,0,0,211,212,5,69,0,0,212,218,5,78,0,0,213,214,5,116,0,0,
        214,215,5,104,0,0,215,216,5,101,0,0,216,218,5,110,0,0,217,209,1,
        0,0,0,217,213,1,0,0,0,218,20,1,0,0,0,219,220,5,87,0,0,220,221,5,
        72,0,0,221,222,5,73,0,0,222,223,5,76,0,0,223,230,5,69,0,0,224,225,
        5,119,0,0,225,226,5,104,0,0,226,227,5,105,0,0,227,228,5,108,0,0,
        228,230,5,101,0,0,229,219,1,0,0,0,229,224,1,0,0,0,230,22,1,0,0,0,
        231,232,5,78,0,0,232,233,5,69,0,0,233,238,5,87,0,0,234,235,5,110,
        0,0,235,236,5,101,0,0,236,238,5,119,0,0,237,231,1,0,0,0,237,234,
        1,0,0,0,238,24,1,0,0,0,239,240,5,78,0,0,240,241,5,79,0,0,241,246,
        5,84,0,0,242,243,5,110,0,0,243,244,5,111,0,0,244,246,5,116,0,0,245,
        239,1,0,0,0,245,242,1,0,0,0,246,26,1,0,0,0,247,248,5,76,0,0,248,
        249,5,69,0,0,249,254,5,84,0,0,250,251,5,108,0,0,251,252,5,101,0,
        0,252,254,5,116,0,0,253,247,1,0,0,0,253,250,1,0,0,0,254,28,1,0,0,
        0,255,256,5,102,0,0,256,257,5,97,0,0,257,258,5,108,0,0,258,259,5,
        115,0,0,259,260,5,101,0,0,260,30,1,0,0,0,261,262,5,116,0,0,262,263,
        5,114,0,0,263,264,5,117,0,0,264,265,5,101,0,0,265,32,1,0,0,0,266,
        267,5,115,0,0,267,268,5,101,0,0,268,269,5,108,0,0,269,270,5,102,
        0,0,270,34,1,0,0,0,271,272,5,83,0,0,272,273,5,69,0,0,273,274,5,76,
        0,0,274,275,5,70,0,0,275,276,5,95,0,0,276,277,5,84,0,0,277,278,5,
        89,0,0,278,279,5,80,0,0,279,280,5,69,0,0,280,36,1,0,0,0,281,282,
        5,66,0,0,282,283,5,111,0,0,283,284,5,111,0,0,284,285,5,108,0,0,285,
        38,1,0,0,0,286,287,5,73,0,0,287,288,5,110,0,0,288,289,5,116,0,0,
        289,40,1,0,0,0,290,291,5,83,0,0,291,292,5,116,0,0,292,293,5,114,
        0,0,293,294,5,105,0,0,294,295,5,110,0,0,295,296,5,103,0,0,296,42,
        1,0,0,0,297,298,5,118,0,0,298,299,5,111,0,0,299,300,5,105,0,0,300,
        301,5,100,0,0,301,44,1,0,0,0,302,303,5,59,0,0,303,46,1,0,0,0,304,
        305,5,58,0,0,305,48,1,0,0,0,306,307,5,123,0,0,307,50,1,0,0,0,308,
        309,5,125,0,0,309,52,1,0,0,0,310,311,5,91,0,0,311,54,1,0,0,0,312,
        313,5,93,0,0,313,56,1,0,0,0,314,315,5,40,0,0,315,58,1,0,0,0,316,
        317,5,41,0,0,317,60,1,0,0,0,318,319,5,44,0,0,319,62,1,0,0,0,320,
        321,5,34,0,0,321,64,1,0,0,0,322,323,5,39,0,0,323,66,1,0,0,0,324,
        325,5,43,0,0,325,68,1,0,0,0,326,327,5,45,0,0,327,70,1,0,0,0,328,
        329,5,42,0,0,329,72,1,0,0,0,330,331,5,47,0,0,331,74,1,0,0,0,332,
        333,5,126,0,0,333,76,1,0,0,0,334,335,5,60,0,0,335,78,1,0,0,0,336,
        337,5,60,0,0,337,338,5,61,0,0,338,80,1,0,0,0,339,340,5,61,0,0,340,
        82,1,0,0,0,341,342,5,46,0,0,342,84,1,0,0,0,343,344,5,64,0,0,344,
        86,1,0,0,0,345,346,5,60,0,0,346,347,5,45,0,0,347,88,1,0,0,0,348,
        349,3,99,49,0,349,350,3,91,45,0,350,90,1,0,0,0,351,355,3,93,46,0,
        352,354,3,101,50,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,
        0,355,356,1,0,0,0,356,92,1,0,0,0,357,355,1,0,0,0,358,359,7,0,0,0,
        359,94,1,0,0,0,360,362,7,1,0,0,361,360,1,0,0,0,362,363,1,0,0,0,363,
        361,1,0,0,0,363,364,1,0,0,0,364,96,1,0,0,0,365,366,7,1,0,0,366,98,
        1,0,0,0,367,368,7,2,0,0,368,100,1,0,0,0,369,372,3,93,46,0,370,372,
        3,97,48,0,371,369,1,0,0,0,371,370,1,0,0,0,372,102,1,0,0,0,373,379,
        5,34,0,0,374,375,5,92,0,0,375,378,7,3,0,0,376,378,8,4,0,0,377,374,
        1,0,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,
        1,0,0,0,380,382,1,0,0,0,381,379,1,0,0,0,382,383,5,34,0,0,383,104,
        1,0,0,0,384,387,3,31,15,0,385,387,3,29,14,0,386,384,1,0,0,0,386,
        385,1,0,0,0,387,106,1,0,0,0,388,389,5,45,0,0,389,390,5,45,0,0,390,
        394,1,0,0,0,391,393,9,0,0,0,392,391,1,0,0,0,393,396,1,0,0,0,394,
        395,1,0,0,0,394,392,1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,
        398,5,10,0,0,398,399,1,0,0,0,399,400,6,53,0,0,400,108,1,0,0,0,401,
        402,5,46,0,0,402,403,5,46,0,0,403,407,1,0,0,0,404,406,9,0,0,0,405,
        404,1,0,0,0,406,409,1,0,0,0,407,408,1,0,0,0,407,405,1,0,0,0,408,
        410,1,0,0,0,409,407,1,0,0,0,410,411,5,46,0,0,411,412,5,46,0,0,412,
        413,1,0,0,0,413,414,6,54,0,0,414,110,1,0,0,0,415,417,5,13,0,0,416,
        415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,421,5,10,0,0,419,
        421,5,13,0,0,420,416,1,0,0,0,420,419,1,0,0,0,421,422,1,0,0,0,422,
        420,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,425,6,55,0,0,425,
        112,1,0,0,0,426,428,7,5,0,0,427,426,1,0,0,0,428,429,1,0,0,0,429,
        427,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,432,6,56,0,0,432,
        114,1,0,0,0,433,434,9,0,0,0,434,116,1,0,0,0,27,0,127,137,143,149,
        155,173,187,197,207,217,229,237,245,253,355,363,371,377,379,386,
        394,407,416,420,422,429,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    ELSE = 2
    FI = 3
    IF = 4
    IN = 5
    INHERITS = 6
    ISVOID = 7
    LOOP = 8
    POOL = 9
    THEN = 10
    WHILE = 11
    NEW = 12
    NOT = 13
    LET = 14
    FALSE = 15
    TRUE = 16
    SELF = 17
    SELF_TYPE = 18
    BOOL = 19
    INT = 20
    STRING = 21
    VOID = 22
    SEMICOLON = 23
    COLON = 24
    LBRACE = 25
    RBRACE = 26
    LBRACKET = 27
    RBRACKET = 28
    LPAR = 29
    RPAR = 30
    COMMA = 31
    QUOTES = 32
    APOSTROPHE = 33
    ADD = 34
    SUB = 35
    MULTIPLY = 36
    DIVIDE = 37
    NEGATION = 38
    LESS_OP = 39
    LESS_EQ_OP = 40
    EQUAL_OP = 41
    DOT = 42
    AT = 43
    ASIGN = 44
    TYPE_ID = 45
    OBJ_ID = 46
    ALPHA = 47
    INTEGER = 48
    DIGIT = 49
    CAP = 50
    ALPHA_NUM = 51
    STRING_LIT = 52
    BOOL_LIT = 53
    COMMENT = 54
    OTHER_COMMENT = 55
    NEWLINE = 56
    WHITESPACE = 57
    ERR_TOKEN = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'false'", "'true'", "'self'", "'SELF_TYPE'", "'Bool'", "'Int'", 
            "'String'", "'void'", "';'", "':'", "'{'", "'}'", "'['", "']'", 
            "'('", "')'", "','", "'\"'", "'''", "'+'", "'-'", "'*'", "'/'", 
            "'~'", "'<'", "'<='", "'='", "'.'", "'@'", "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", 
            "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", "FALSE", "TRUE", 
            "SELF", "SELF_TYPE", "BOOL", "INT", "STRING", "VOID", "SEMICOLON", 
            "COLON", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "LPAR", 
            "RPAR", "COMMA", "QUOTES", "APOSTROPHE", "ADD", "SUB", "MULTIPLY", 
            "DIVIDE", "NEGATION", "LESS_OP", "LESS_EQ_OP", "EQUAL_OP", "DOT", 
            "AT", "ASIGN", "TYPE_ID", "OBJ_ID", "ALPHA", "INTEGER", "DIGIT", 
            "CAP", "ALPHA_NUM", "STRING_LIT", "BOOL_LIT", "COMMENT", "OTHER_COMMENT", 
            "NEWLINE", "WHITESPACE", "ERR_TOKEN" ]

    ruleNames = [ "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", 
                  "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "LET", 
                  "FALSE", "TRUE", "SELF", "SELF_TYPE", "BOOL", "INT", "STRING", 
                  "VOID", "SEMICOLON", "COLON", "LBRACE", "RBRACE", "LBRACKET", 
                  "RBRACKET", "LPAR", "RPAR", "COMMA", "QUOTES", "APOSTROPHE", 
                  "ADD", "SUB", "MULTIPLY", "DIVIDE", "NEGATION", "LESS_OP", 
                  "LESS_EQ_OP", "EQUAL_OP", "DOT", "AT", "ASIGN", "TYPE_ID", 
                  "OBJ_ID", "ALPHA", "INTEGER", "DIGIT", "CAP", "ALPHA_NUM", 
                  "STRING_LIT", "BOOL_LIT", "COMMENT", "OTHER_COMMENT", 
                  "NEWLINE", "WHITESPACE", "ERR_TOKEN" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


